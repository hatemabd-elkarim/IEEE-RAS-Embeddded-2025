<<< Hatem Ayman Abd-Elkarim >>>

Pointers are variables that store the memory addresses of other variables. You can dereference a pointer by the operator (*) to access the value it is referring to,
and you can reference a pointer by the operator (&) to initialize a pointer with the location of another variable

---

A. Types of Pointers with Examples

a. Integer Pointer

int a = 10;
int *aptr = &a; // p holds the address of variable a
```

b. Float Pointer

float f = 3.14;
float *fptr = &f;

c. Character Pointer

char c = 'A';
char *cptr = &c;


d. Void Pointer

int a = 5;
void *vp = &a;

Explanation: A void pointer can point to any data type but needs to be typecast before dereferencing.

e. Pointer to Pointer

int a = 5;
int *p = &a;
int **pptr = &p;

Explanation: `pptr` is a pointer to a pointer, storing the address of another pointer.

f. Null Pointer

int *ptr = NULL;

Explanation: A null pointer points to nothing. It is used to initialize pointers safely.

---

B. Pass by Value vs Pass by Reference

Pass by Value Example: 

#include <stdio.h>

void increment(int a) {
    a = a + 1;
}

int main() {
    int x = 5;
    increment(x);
    printf("x = %d\n", x); // Output: x = 5
    return 0;
}

Explanation: The value of `x` is passed to the function, so the original variable remains unchanged.

Pass by Reference Example:

#include <stdio.h>

void increment(int *a) {
    *a = *a + 1;
}

int main() {
    int x = 5;
    increment(&x);
    printf("x = %d\n", x); // Output: x = 6
    return 0;
}

Explanation: The address of `x` is passed, so the function can modify the actual variable.

---
